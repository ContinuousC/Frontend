/******************************************************************************
 * Copyright ContinuousC. Licensed under the "Elastic License 2.0".           *
 ******************************************************************************/

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/alert_rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of alert rule names */
        get: operations["get_api-alert_rules-4bc08eb814eef5afac2bd210d6ad1246"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alert_rules/{rule}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an alert rule specification and config */
        get: operations["get_api-alert_rules-942c5644da3491fa8a3e74f7e836671b"];
        /** Create or update an alert rule */
        put: operations["put_api-alert_rules-942c5644da3491fa8a3e74f7e836671b"];
        post?: never;
        /** Delete an alert rule */
        delete: operations["delete_api-alert_rules-942c5644da3491fa8a3e74f7e836671b"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alert_rules/{rule}/selectors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an alert rules selectors */
        get: operations["get_api-alert_rules-4dddf55e8cd9ee39ce2ff0d331ec17d9"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alert_rules/{rule}/selectors/{label}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an alert rule selectors values */
        get: operations["get_api-alert_rules-6ee518ec12be7d2f900aecd51f1a6ed4"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alerts/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Query all open alerts */
        post: operations["post_api-alerts-all-c2133f67756920fe2b938d6a6579a8bd"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alerts/all/{time}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Query all open alertsat a point in time */
        post: operations["post_api-alerts-all-4a138f3f83d101b3f271bd65c62c2dfe"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alerts/bins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Query binned alerts */
        post: operations["post_api-alerts-bins-d0f53a27d0816866180d65dda416cde9"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alerts/count/item/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get alert counts for an item and its descendants */
        get: operations["get_api-alerts-count-item-c3dd54eb98ecbd54fb17358e3545258f"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alerts/count/item/{item_id}/{time}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get alert counts for an item and its descendants at a point in time */
        get: operations["get_api-alerts-count-item-be11e69fba81d0668d68f78d9def784e"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alerts/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Query alert changes in a time range */
        post: operations["post_api-alerts-events-3b780ae129bf28fd3f7ccae59687a49c"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alerts/item/{item}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Query open alerts for an item */
        get: operations["get_api-alerts-item-badc0e72af2b2c5b769a4d02cccf08ab"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alerts/item/{item}/{time}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Query open alerts for an item at a point in time */
        get: operations["get_api-alerts-item-7770439a3df67d85cda363994f8c3429"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alerts/item_types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Query open alerts for multiple item types */
        post: operations["post_api-alerts-item_types-fa663c89840350640a434c531b740f6a"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alerts/item_types/{time}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Query open alerts for multipe item types at a point in time */
        post: operations["post_api-alerts-item_types-71a35f143625c957a83f86e2dca1b9cd"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alerts/items/{package}/{item_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Query open alerts for an item type */
        get: operations["get_api-alerts-items-b1a836b6502cc51d25d13f2d3df98979"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alerts/items/{package}/{item_type}/{time}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Query open alerts for an item type at a point in time */
        get: operations["get_api-alerts-items-1026ee15012fb5e1733387022b27879a"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alerts/relation/{rel}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Query open alerts for a relation */
        get: operations["get_api-alerts-relation-5a61a000c274d29a58c1bb5f121fa51d"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/alerts/relation/{rel}/{time}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Query open alerts for a relation at a point in time */
        get: operations["get_api-alerts-relation-e7fcd91b84274080e00b9abe7292ac9d"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/changes/bins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get binned changes */
        post: operations["post_api-changes-bins-d099ac847174d3a7df7e0f84b5337a05"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/changes/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get individual changes */
        post: operations["post_api-changes-events-b3d9f9052d1f6ba3377dcfbf05f5520f"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/connections-package": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List loaded connections packages */
        get: operations["get_api-connections-package-5c9ad65fe7a024f4c4cf7fc273719d94"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/connections-package/{package}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download a single connections package */
        get: operations["get_api-connections-package-29093cce02f6ed2791d96dbab7471590"];
        /** Create or update a connections package */
        put: operations["put_api-connections-package-29093cce02f6ed2791d96dbab7471590"];
        post?: never;
        /** Remove a connections package */
        delete: operations["delete_api-connections-package-29093cce02f6ed2791d96dbab7471590"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of dashboards */
        get: operations["get_api-dashboards-778aa5477f8258d931c852edbc9eb703"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboards/{dashboard}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a dashboard definition */
        get: operations["get_api-dashboards-ea6b5953211ed4cae2503597e120a851"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/elements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get element types */
        post: operations["post_api-elements-3fe009976726027c66de1b551661b895"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/elements/{time}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get element types at a point in time */
        post: operations["post_api-elements-aa86da821f7ed158a9993fcd48df45a6"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/info-query/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get info query metrics */
        post: operations["post_api-info-query-metrics-b5c635ab9cfec6c0ccf0f6274d0f311a"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all items */
        get: operations["get_api-item-2490f8ffde47d4c357b7356ded0f88fe"];
        /** Create a new item */
        put: operations["put_api-item-2490f8ffde47d4c357b7356ded0f88fe"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/item/view/{package}/{item_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get item type unique view */
        get: operations["get_api-item-view-60cca7f4cc59e7c98bd201c08cf47f1b"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/item/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an item by id */
        get: operations["get_api-item-446b04a6c9093bc63aa458a66fe2b2f1"];
        /** Create or update an item with id */
        put: operations["put_api-item-446b04a6c9093bc63aa458a66fe2b2f1"];
        post?: never;
        /** Delete an item */
        delete: operations["delete_api-item-446b04a6c9093bc63aa458a66fe2b2f1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Create or update multiple items and relations */
        put: operations["put_api-items-c11bcff936a2d7ff8ff232de884821ab"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/items/count/aggr-status/item-type/{item_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get aggregated status counts for an item type */
        get: operations["get_api-items-count-aggr-status-item-type-9f88096f88348424884e226a79dfa38a"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/items/count/aggr-status/item-type/{item_type}/{time}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get historical Get aggregated status counts for an item type */
        get: operations["get_api-items-count-aggr-status-item-type-f7474b3ebf2660844c5f9353e23a11e9"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/items/count/descendants/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get descendant counts */
        get: operations["get_api-items-count-descendants-210433b11a0993e27c19100572fe879d"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/items/count/descendants/{item_id}/{time}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get historical descendant counts */
        get: operations["get_api-items-count-descendants-0676af2a587b82b7b634016cd675aa0a"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/items/{pkg}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Create or update multiple items and relations relative to a package */
        put: operations["put_api-items-af5b6ada4efb34616851134491003158"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics/bulk/instant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bulk query metrics at a timestamp */
        post: operations["post_api-metrics-bulk-instant-c27fe2608f4ad679de74b1a83ace1623"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics/bulk/range": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bulk query metrics over a time range */
        post: operations["post_api-metrics-bulk-range-45ae9c4281087553636ca6a4e080661a"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics/instant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Query metrics at a timestamp */
        post: operations["post_api-metrics-instant-d8708235afce957e9b9d02c02441f615"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics/range": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Query metrics over a time range */
        post: operations["post_api-metrics-range-5f48bc2f79cac5fc6cd0dda0799eb0f6"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics/range_raw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Query query range */
        post: operations["post_api-metrics-range_raw-a627218e7fa7052a2392c4ba37f54f2f"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics/sources/{promitem}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get sources for a prometheus item */
        get: operations["get_api-metrics-sources-1d271603f653bc04ef537472b999cdbf"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/package": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List loaded packages */
        get: operations["get_api-package-62d782e497d9ee940fb3268f82b23457"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/package/{package}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download a single package */
        get: operations["get_api-package-b87fad87381fc03c073bbfba052f7a5c"];
        /** Load a new package */
        put: operations["put_api-package-b87fad87381fc03c073bbfba052f7a5c"];
        post?: never;
        /** Delete a package */
        delete: operations["delete_api-package-b87fad87381fc03c073bbfba052f7a5c"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/packages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download all loaded packages */
        get: operations["get_api-packages-95be49f06ca411e6ea5790d99e2c62e1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List prometheus schema modules in process of generation */
        get: operations["get_api-prom-schema-generate-0233f5cc7152ab97c4b3c32c40e75395"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/generate/{module}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about a prometheus schema module in process of generation */
        get: operations["get_api-prom-schema-generate-43d173b0f77323c2b47fabb024dc0306"];
        /** Create a prometheus schema module for schema generation */
        put: operations["put_api-prom-schema-generate-43d173b0f77323c2b47fabb024dc0306"];
        post?: never;
        /** Delete a prometheus schema module in process of generation */
        delete: operations["delete_api-prom-schema-generate-43d173b0f77323c2b47fabb024dc0306"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/generate/{module}/choose/tree{path:/.*|$}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Make a choice at path */
        put: operations["put_api-prom-schema-generate-4cd7fd1f139f569363ef7796995c5b17"];
        post?: never;
        /** Revert to default choice at and below path */
        delete: operations["delete_api-prom-schema-generate-4cd7fd1f139f569363ef7796995c5b17"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/generate/{module}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download module */
        get: operations["get_api-prom-schema-generate-3fcace7f8cd59a2a851c787d9bb03be2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/generate/{module}/hints/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download module hints */
        get: operations["get_api-prom-schema-generate-bf91254b80a6371c1941aae4a206f6a5"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/generate/{module}/info/tree{path:/.*|$}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get info at path in the generated module tree */
        get: operations["get_api-prom-schema-generate-88c48e0209d387e2f169c4a5d4620c25"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/generate/{module}/items/tree{path:/.*|$}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get prometheus items at path */
        post: operations["post_api-prom-schema-generate-8ae0d9076f354c792b9acd414f482af7"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/generate/{module}/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get info about loaded prometheus metrics for schema generation */
        get: operations["get_api-prom-schema-generate-ea3b52ef4f1743e9fb7666b468d3814f"];
        put?: never;
        /** Load prometheus metrics for schema generation */
        post: operations["post_api-prom-schema-generate-ea3b52ef4f1743e9fb7666b468d3814f"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/generate/{module}/metrics/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download metrics */
        get: operations["get_api-prom-schema-generate-4aadc79f9602153c3d1ca79b0aefd83c"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/generate/{module}/metrics/tree{path:/.*|$}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get prometheus metrics at path */
        post: operations["post_api-prom-schema-generate-184830d779a6bb36f7b5b9ad256dd478"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/generate/{module}/rename": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Rename a prometheus schema module for schema generation */
        post: operations["post_api-prom-schema-generate-a34fbed3fe3cb5fdbdb8960e3c802282"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/generate/{module}/rename/{item}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Rename a prometheus item */
        put: operations["put_api-prom-schema-generate-b74aceafd2b27635e8971cec72ffc116"];
        post?: never;
        /** Unrename a prometheus item */
        delete: operations["delete_api-prom-schema-generate-b74aceafd2b27635e8971cec72ffc116"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/generate/{module}/split/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Split by label at a query */
        put: operations["put_api-prom-schema-generate-ff0a7fe2c2abc8ac39ee217f57386f76"];
        post?: never;
        /** Unsplit by label at a query */
        delete: operations["delete_api-prom-schema-generate-ff0a7fe2c2abc8ac39ee217f57386f76"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/generate/{module}/split/tree{path:/.*|$}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Split by label at an item */
        put: operations["put_api-prom-schema-generate-2db4474c419296a7349881a1a9277b69"];
        post?: never;
        /** Unsplit by label at an item */
        delete: operations["delete_api-prom-schema-generate-2db4474c419296a7349881a1a9277b69"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/generate/{module}/tree": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get generated module tree */
        get: operations["get_api-prom-schema-generate-7118337fe43a1b0d14707654f31cea97"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/info/item/{item:[^/:]+:[^/]+}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get prometheus item info */
        get: operations["get_api-prom-schema-info-item-7539ee3d22657ccb7d6fbe84973655c5"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/info/module": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get prometheus module list */
        get: operations["get_api-prom-schema-info-module-a65631f385dd4817bfb547f8cb01a0eb"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/info/module/{mod:[^/]+}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get prometheus module info */
        get: operations["get_api-prom-schema-info-module-8d1e3f3f203e66080887984a4cbbec08"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/info/tree{path:/.*|$}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get prometheus schema info */
        get: operations["get_api-prom-schema-info-tree{path:-.*|$}-3cedf0f8cdbb5bc9887de32617d56762"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get prometheus item list */
        get: operations["get_api-prom-schema-items-0558b36fcd5a74790c8dd1a28d8011d4"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/items/tree{path:/.*|$}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get prometheus items */
        post: operations["post_api-prom-schema-items-tree{path:-.*|$}-1d091eda3a58a9a0c38fa2c3d6c896c4"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/metrics/tree{path:/.*|$}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get prometheus metrics */
        post: operations["post_api-prom-schema-metrics-tree{path:-.*|$}-54bb8d2bc840c995523755d86f3a925a"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/prom-schema/tree": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get prometheus schema tree */
        get: operations["get_api-prom-schema-tree-ede916f7de4ad25ddc8fb2a7d885ebb8"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Run a query */
        post: operations["post_api-query-cf794541a341a52c22360c3691b7b4b5"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/query/{time}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Run a query at a point in time */
        post: operations["post_api-query-55e4a5c417dbc0d863271d8c82c641e3"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/relation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all relations */
        get: operations["get_api-relation-a6204db2d27ad54d2a69cd7e9d39c398"];
        /** Create a relation */
        put: operations["put_api-relation-a6204db2d27ad54d2a69cd7e9d39c398"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/relation/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Create or update a relation by id */
        put: operations["put_api-relation-c74778c7c61ae2c84457a9e29909fa7f"];
        post?: never;
        /** Delete a relation */
        delete: operations["delete_api-relation-c74778c7c61ae2c84457a9e29909fa7f"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search-domain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Run a search-domain query */
        post: operations["post_api-search-domain-3813744daea64e5fcb87acceda9b906b"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search-domain/{time}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Run a search-domain query at a point in time */
        post: operations["post_api-search-domain-5d48caea8714f51f80553eae37e1a00c"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get status map */
        get: operations["get_api-status-3372e7c31d1eaae32cf561ed2a2ab917"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/status/bins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Query status change bins */
        post: operations["post_api-status-bins-df7ff92abb502c04c8d25d686e39a319"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/status/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Query status changes */
        post: operations["post_api-status-events-1c8824adf9e84ed0207a32d4a8b45a1a"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/status/{time}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get status map at a point in time */
        get: operations["get_api-status-2ae3adcf8999a0550002c58214065d40"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transaction": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Create a transaction */
        put: operations["put_api-transaction-75f9f1c620cc1f06140883d2f4deed31"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transaction/{tx}/abort": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Abort a transaction */
        put: operations["put_api-transaction-c19641cd42278281a8cf95e4e21f8b50"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transaction/{tx}/commit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Commit a transaction */
        put: operations["put_api-transaction-5dfdd53234848a2f88fd694822f74529"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transaction/{tx}/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Create an item inside a transaction */
        put: operations["put_api-transaction-b1853eb93435c03a7bca2a15d5aed14c"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transaction/{tx}/item/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Create or update an item inside a transaction */
        put: operations["put_api-transaction-3e9f5159570188bd52fdd47dd15580bb"];
        /** Read an item inside a transaction */
        post: operations["post_api-transaction-3e9f5159570188bd52fdd47dd15580bb"];
        /** Delete an item inside a transaction */
        delete: operations["delete_api-transaction-3e9f5159570188bd52fdd47dd15580bb"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transaction/{tx}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Bulk update items and relations within a transaction */
        put: operations["put_api-transaction-b3f6eecd785b375ce8a903251a482de8"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transaction/{tx}/items/{pkg}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Bulk update items and relations within a transaction, relative to a package */
        put: operations["put_api-transaction-84a53342638c2546107f48c2ccbd0a63"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transaction/{tx}/relation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Create a relation inside a transaction */
        put: operations["put_api-transaction-fb20037dfee0e9a6580c8c6cc03c493a"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transaction/{tx}/relation/{rel_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Create or update a relation inside a transaction */
        put: operations["put_api-transaction-d9496f48b00b87cb8758934fa59e409f"];
        /** Read a relation inside a transaction */
        post: operations["post_api-transaction-d9496f48b00b87cb8758934fa59e409f"];
        /** Delete a relation inside a transaction */
        delete: operations["delete_api-transaction-d9496f48b00b87cb8758934fa59e409f"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/types/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List item types */
        get: operations["get_api-types-item-c2687ce20abda1bdebbad3f33bdaf745"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/types/item/{package}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List item types for a package */
        get: operations["get_api-types-item-2dab86969b5f7f4684e5f062e0400222"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/types/item/{package}/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get info on an item type */
        get: operations["get_api-types-item-2578a64cb06d2ce54727fe031ee41f07"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/types/property": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List property types */
        get: operations["get_api-types-property-ddf577326ba19d392e35bf3b66f458a1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/types/property/{package}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List property types for a package */
        get: operations["get_api-types-property-619e5532f65563b7b27d393f566dba7c"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/types/property/{package}/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get info on a property type */
        get: operations["get_api-types-property-88c76de994e539b6f9a653142f7ba9da"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/types/relation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List relation types */
        get: operations["get_api-types-relation-5b3e28ff8d56b4aa49f571d2cf54f546"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/types/relation/{package}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List item types for a package */
        get: operations["get_api-types-relation-bb9e24f873ff8a3857e9a50eeaf9c17a"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/types/relation/{package}/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get info on an item type */
        get: operations["get_api-types-relation-cd8cad06576d7e0459b0f2bf765e8c3e"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/types/selector": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get info for selector autocompletion */
        post: operations["post_api-types-selector-951ae1f4ca09e0ea0b9ddab76ff4f80b"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the application version */
        get: operations["get_api-version-5f4cac1cdb82904c0873630dd93553bd"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/views": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of views */
        get: operations["get_api-views-da932167131cc37e6c0b62f383fade1e"];
        /** Update view definitions */
        put: operations["put_api-views-da932167131cc37e6c0b62f383fade1e"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/views/{view}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a view definition */
        get: operations["get_api-views-cce9236053a0f7544e8a21147ecf8883"];
        /** Create or update a view definition */
        put: operations["put_api-views-cce9236053a0f7544e8a21147ecf8883"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AbsItemTypeIds */
        AbsItemTypeIds: components["schemas"]["Absolute_ItemTypeId"][];
        /** AbsRelationTypeIds */
        AbsRelationTypeIds: components["schemas"]["Absolute_RelationTypeId"][];
        Absolute_ItemTypeId: string;
        Absolute_PropertyId: string;
        Absolute_RelationTypeId: string;
        AlertRuleConfig_for_CustomAlertRuleForm: {
            for: components["schemas"]["PromDuration"];
            labels: {
                [key: string]: string;
            };
            params: components["schemas"]["CustomAlertRuleConfig"];
            selectors: components["schemas"]["MetricSelector"];
        };
        AlertRuleConfig_for_DynamicTracesAlertRuleForm: {
            for: components["schemas"]["PromDuration"];
            labels: {
                [key: string]: string;
            };
            params: components["schemas"]["DynamicTraceAlertRuleConfig"];
            selectors: components["schemas"]["MetricSelector"];
        };
        AlertRuleConfig_for_FixedTracesAlertRuleForm: {
            for: components["schemas"]["PromDuration"];
            labels: {
                [key: string]: string;
            };
            params: components["schemas"]["FixedTraceAlertRuleConfig"];
            selectors: components["schemas"]["MetricSelector"];
        };
        AlertRuleForm_for_CustomAlertRuleForm: {
            configs: {
                [key: string]: components["schemas"]["AlertRuleConfig_for_CustomAlertRuleForm"];
            };
            template: components["schemas"]["AlertRuleTemplate_for_CustomAlertRuleForm"];
        };
        AlertRuleForm_for_DynamicTracesAlertRuleForm: {
            configs: {
                [key: string]: components["schemas"]["AlertRuleConfig_for_DynamicTracesAlertRuleForm"];
            };
            template: components["schemas"]["AlertRuleTemplate_for_DynamicTracesAlertRuleForm"];
        };
        AlertRuleForm_for_FixedTracesAlertRuleForm: {
            configs: {
                [key: string]: components["schemas"]["AlertRuleConfig_for_FixedTracesAlertRuleForm"];
            };
            template: components["schemas"]["AlertRuleTemplate_for_FixedTracesAlertRuleForm"];
        };
        AlertRuleForms: {
            custom: components["schemas"]["AlertRuleForm_for_CustomAlertRuleForm"];
        } | {
            fixed_traces: components["schemas"]["AlertRuleForm_for_FixedTracesAlertRuleForm"];
        } | {
            dynamic_traces: components["schemas"]["AlertRuleForm_for_DynamicTracesAlertRuleForm"];
        };
        AlertRuleTemplateName: string;
        AlertRuleTemplate_for_CustomAlertRuleForm: {
            alert: components["schemas"]["AlertRuleTemplateName"];
            annotations: components["schemas"]["Annotations_for_AnnotationTemplate"];
            default: components["schemas"]["AlertRuleConfig_for_CustomAlertRuleForm"];
            spec: components["schemas"]["CustomAlertRuleSpec"];
        };
        AlertRuleTemplate_for_DynamicTracesAlertRuleForm: {
            alert: components["schemas"]["AlertRuleTemplateName"];
            annotations: components["schemas"]["Annotations_for_AnnotationTemplate"];
            default: components["schemas"]["AlertRuleConfig_for_DynamicTracesAlertRuleForm"];
            spec: components["schemas"]["DynamicTraceAlertRuleSpec"];
        };
        AlertRuleTemplate_for_FixedTracesAlertRuleForm: {
            alert: components["schemas"]["AlertRuleTemplateName"];
            annotations: components["schemas"]["Annotations_for_AnnotationTemplate"];
            default: components["schemas"]["AlertRuleConfig_for_FixedTracesAlertRuleForm"];
            spec: components["schemas"]["FixedTraceAlertRuleSpec"];
        };
        Anchor: {
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            from: string;
            /** Format: date-time */
            to?: string | null;
        };
        AnnotationTemplate: string;
        Annotations_for_AnnotationTemplate: {
            description?: components["schemas"]["AnnotationTemplate"] | null;
            runbook_url?: components["schemas"]["AnnotationTemplate"] | null;
            summary?: components["schemas"]["AnnotationTemplate"] | null;
        };
        AnomalyTracesGraphType: {
            /** @default true */
            confidence_interval: boolean;
            /** @enum {string} */
            graph: "metric";
            /** @default 15m */
            immediate_interval: components["schemas"]["ImmediateInterval"];
            metric: components["schemas"]["TraceMetric"];
            reference_interval?: components["schemas"]["ReferenceInterval"] | null;
            /**
             * Format: uint64
             * @default 5
             */
            top: number;
        } | {
            /**
             * @description A number between 0.0 and 1.0 that controls the effect of the total number of operation types on the aggregated anomaly score. An aggregation factor of zero means anomalies are summed, while an aggregation factor of one means the average is taken.
             * @default 0.5
             */
            aggr_factor: components["schemas"]["CombinationFactor"];
            /** @enum {string} */
            graph: "score";
            /** @default 15m */
            immediate_interval: components["schemas"]["ImmediateInterval"];
            metric: components["schemas"]["TraceMetric"];
            /** @default 7d */
            reference_interval: components["schemas"]["ReferenceInterval"];
            /** Format: uint64 */
            top?: number | null;
        };
        Augmented_for_Item_and_StatusInfo: {
            info: components["schemas"]["StatusInfo"];
            value: components["schemas"]["Item"];
        };
        Augmented_for_Relation_and_StatusInfo: {
            info: components["schemas"]["StatusInfo"];
            value: components["schemas"]["Relation"];
        };
        Bin: {
            /** Format: uint64 */
            count: number;
            /** Format: date-time */
            from: string;
            /** Format: date-time */
            to: string;
        };
        /** BinnedEvents_for_DbItem */
        BinnedEvents_for_DbItem: {
            bins: components["schemas"]["Bin"][];
            events: components["schemas"]["Event_for_DbItem"][];
        };
        /** BinnedEvents_for_StatusDoc */
        BinnedEvents_for_StatusDoc: {
            bins: components["schemas"]["Bin"][];
            events: components["schemas"]["Event_for_StatusDoc"][];
        };
        /** BinsParams */
        BinsParams: {
            /** Format: date-time */
            from: string;
            interval: components["schemas"]["Interval"];
            items: components["schemas"]["ItemId"][];
            relations: components["schemas"]["RelationId"][];
            /**
             * Format: uint32
             * @default 1
             */
            step: number;
            timezone: string;
            /** Format: date-time */
            to: string;
        };
        /** BulkQueryParams_for_InstantQueryParams */
        BulkQueryParams_for_InstantQueryParams: {
            item_keys?: {
                [key: string]: components["schemas"]["LabelName"][];
            } | null;
            item_queries?: {
                [key: string]: {
                    [key: string]: string;
                };
            } | null;
            metrics: {
                [key: string]: components["schemas"]["QueryMetric"];
            };
            /** @default {} */
            sources: {
                [key: string]: components["schemas"]["SourceId"];
            };
            /** Format: date-time */
            time?: string | null;
        };
        /** BulkQueryParams_for_RangeQueryParams */
        BulkQueryParams_for_RangeQueryParams: {
            /** Format: date-time */
            end: string;
            item_keys?: {
                [key: string]: components["schemas"]["LabelName"][];
            } | null;
            item_queries?: {
                [key: string]: {
                    [key: string]: string;
                };
            } | null;
            metrics: {
                [key: string]: components["schemas"]["QueryMetric"];
            };
            /** @default {} */
            sources: {
                [key: string]: components["schemas"]["SourceId"];
            };
            /** Format: date-time */
            start: string;
            /** Format: double */
            step: number;
        };
        ByTheme_for_GraphColor: components["schemas"]["GraphColor"] | {
            dark: components["schemas"]["GraphColor"];
            light: components["schemas"]["GraphColor"];
        };
        ByTheme_for_String: string | {
            dark: string;
            light: string;
        };
        Choice: {
            choice: components["schemas"]["LabelName"][];
            choices: components["schemas"]["LabelName"][][];
            query: components["schemas"]["MetricSelector"];
        };
        Choose: {
            choice: components["schemas"]["LabelName"][];
            query: components["schemas"]["MetricSelector"];
        };
        /** ChooseParams */
        ChooseParams: {
            choice: components["schemas"]["LabelName"][];
        };
        CollectedInfo: {
            elem: string;
            keys: components["schemas"]["LabelName"][];
            query: components["schemas"]["MetricSelector"];
        };
        /** Format: double */
        CombinationFactor: number;
        CombineScores: {
            combine: components["schemas"]["CombinationFactor"];
        };
        /** ConnectionsPackage */
        ConnectionsPackage: {
            /** @default {} */
            items: {
                [key: string]: components["schemas"]["ItemConnections"];
            };
            /** @default {} */
            relations: {
                [key: string]: components["schemas"]["RelationConnections"];
            };
            /** @default {
             *       "discovery": {},
             *       "prometheus": {}
             *     } */
            requires: components["schemas"]["ConnectionsRequires"];
            version: components["schemas"]["PackageVersion"];
        };
        /** ConnectionsPackageInfo */
        ConnectionsPackageInfo: {
            [key: string]: components["schemas"]["PackageVersion"];
        };
        ConnectionsPackages: {
            [key: string]: components["schemas"]["ConnectionsPackage"];
        };
        ConnectionsRequires: {
            /** @default {} */
            discovery: {
                [key: string]: components["schemas"]["PackageVersionReq"];
            };
            /** @default {} */
            prometheus: {
                [key: string]: components["schemas"]["ModuleVersionReq"];
            };
        };
        Connector: {
            groups: {
                [key: string]: components["schemas"]["ConnectorRuleGroup"];
            };
        };
        ConnectorRule: {
            source: components["schemas"]["ItemSelector"];
            target: components["schemas"]["ItemSelector"];
            template: {
                [key: string]: components["schemas"]["TplVarDef"];
            };
        };
        ConnectorRuleGroup: {
            rules: components["schemas"]["ConnectorRule"][];
        };
        /**
         * Created
         * @enum {string}
         */
        Created: "created";
        CustomAlertRuleConfig: {
            instance: components["schemas"]["InstanceAction"];
            params: components["schemas"]["ParamValues"];
            thresholds: {
                [key: string]: components["schemas"]["ParamValues"];
            };
        };
        CustomAlertRuleSpec: {
            expr: components["schemas"]["ExprImpl"];
            item: components["schemas"]["QualifiedItemName"];
            params: {
                [key: string]: components["schemas"]["ParamSpec"];
            };
            /** @default  */
            value_unit: components["schemas"]["Unit"];
        };
        Dashboard: {
            instance?: components["schemas"]["InstanceDashboard"] | null;
            type_range?: components["schemas"]["TypeRangeDashboard"] | null;
        };
        DashboardMetric: {
            display_unit?: components["schemas"]["Unit"] | null;
            documentation?: string | null;
            expr: components["schemas"]["ExprImpl"];
            item: components["schemas"]["QualifiedItemName"];
            name: string;
            /** @default {} */
            thresholds: {
                [key: string]: components["schemas"]["ExprImpl"];
            };
            /** @default  */
            unit: components["schemas"]["Unit"];
        };
        DashboardMetricId: string;
        /**
         * Deleted
         * @enum {string}
         */
        Deleted: "deleted";
        /**
         * @description Base dimensions. These can be considered a unit's "type". Conversion is possible only between units of the same dimension.
         * @enum {string}
         */
        Dimension: "length" | "mass" | "time" | "current" | "temperature" | "area" | "volume" | "speed" | "acceleration" | "potential" | "power" | "resistance" | "conductivity" | "absolute_humidity" | "frequency" | "time_square" | "information" | "operations" | "bandwidth" | "i_o_latency" | "i_o_performance" | "avg_op_size" | "fan_speed" | "dimensionless";
        Domain: {
            /** @default null */
            roots: components["schemas"]["ItemId"][] | null;
            types: components["schemas"]["TypeSet"];
        };
        /**
         * Done
         * @enum {string}
         */
        Done: "done";
        /** DownloadMetrics */
        DownloadMetrics: components["schemas"]["Metric_for_Map_of_String_and_DataPoint2_for_Value"][];
        DynamicTraceAlertRuleConfig: {
            /** Format: double */
            offset: number;
            thresholds: {
                [key: string]: number;
            };
        };
        DynamicTraceAlertRuleSpec: {
            item: components["schemas"]["TraceItem"];
            long_term_interval: components["schemas"]["ReferenceInterval"];
            metric: components["schemas"]["TraceMetric"];
            short_term_interval: components["schemas"]["ImmediateInterval"];
        };
        Elements: {
            item_types: components["schemas"]["Relative_ItemTypeId"][];
            relation_types: components["schemas"]["Relative_RelationTypeId"][];
        };
        /** @enum {string} */
        Endpoint: "source" | "target";
        /** @enum {string} */
        EventType: "added" | "modified" | "removed";
        Event_for_DbItem: {
            change_type: components["schemas"]["EventType"];
            object_id: string;
            parent?: components["schemas"]["ItemId"] | null;
            properties?: {
                [key: string]: {
                    [key: string]: unknown;
                };
            };
            /** Format: date-time */
            timestamp: string;
        } & ({
            item_id: components["schemas"]["ItemId"];
            item_name: string[];
            item_type: components["schemas"]["Absolute_ItemTypeId"];
            parents: components["schemas"]["ItemId"][];
            /** @enum {string} */
            type: "item";
        } | {
            relation_id: components["schemas"]["RelationId"];
            relation_type: components["schemas"]["Absolute_RelationTypeId"];
            source: components["schemas"]["ItemInfo"];
            target: components["schemas"]["ItemInfo"];
            /** @enum {string} */
            type: "relation";
        });
        Event_for_StatusDoc: {
            change_type: components["schemas"]["EventType"];
            object_id: string;
            previous?: components["schemas"]["Status"] | null;
            status?: components["schemas"]["Status"];
            /** Format: date-time */
            timestamp: string;
        } & ({
            item_id: components["schemas"]["ItemId"];
            item_name: string[];
            item_type: components["schemas"]["Absolute_ItemTypeId"];
            parents: components["schemas"]["ItemId"][];
            /** @enum {string} */
            type: "item";
        } | {
            relation_id: components["schemas"]["RelationId"];
            relation_type: components["schemas"]["Absolute_RelationTypeId"];
            source: components["schemas"]["ItemInfo"];
            target: components["schemas"]["ItemInfo"];
            /** @enum {string} */
            type: "relation";
        });
        ExprImpl: string;
        ExprName: string;
        FixedTraceAlertRuleConfig: {
            quantile: string;
            thresholds: {
                [key: string]: string;
            };
        };
        FixedTraceAlertRuleSpec: {
            interval: components["schemas"]["ImmediateInterval"];
            item: components["schemas"]["TraceItem"];
            metric: components["schemas"]["TraceMetric"];
            param: components["schemas"]["TraceParameter"];
        };
        Follow: {
            element: components["schemas"]["QueryElemId"];
            relation: components["schemas"]["RelationSelector"];
        };
        FollowItem: {
            item: components["schemas"]["ItemSelector"];
            key: components["schemas"]["ItemKeySelector"];
        };
        FollowParent: {
            item: components["schemas"]["ItemSelector"];
            key: components["schemas"]["ItemKeySelector"];
        };
        FollowRelation: {
            key: components["schemas"]["RelationKeySelector"];
            relation: components["schemas"]["RelationSelector"];
        };
        /** GenInfo */
        GenInfo: {
            hints: components["schemas"]["Hints"];
            query: components["schemas"]["MetricSelector"];
        };
        /** GenerateTreeInfo */
        GenerateTreeInfo: {
            choice: components["schemas"]["Choice"];
            collected: components["schemas"]["CollectedInfo"][];
            errors: string[];
            items: components["schemas"]["QualifiedItemName"][];
            keys: components["schemas"]["LabelName"][];
            metrics: components["schemas"]["MetricName"][];
            name: components["schemas"]["QualifiedItemName"];
            paths: string[];
            query: components["schemas"]["MetricSelector"];
            split_by: components["schemas"]["LabelName"][];
            splittable: components["schemas"]["LabelName"][];
            /** @enum {string} */
            type: "item";
        } | {
            collected: components["schemas"]["CollectedInfo"][];
            metric: components["schemas"]["Metric"];
            name: components["schemas"]["MetricName"];
            paths: string[];
            /** @enum {string} */
            type: "metric";
        };
        GraphColor: components["schemas"]["PredefinedColor"] | string;
        /** Format: double */
        GraphEdgeSize: number;
        GraphMetricColor: components["schemas"]["GraphColor"];
        /** Format: double */
        GraphNodeSize: number;
        Hints: {
            choose?: components["schemas"]["Choose"][];
            rename?: components["schemas"]["Map_of_Set_of_MetricSelector"];
            split_by?: components["schemas"]["SplitBy"][];
        };
        Histogram: {
            /** @default {} */
            labels: components["schemas"]["MetricSelector"];
            /** @default {} */
            query: components["schemas"]["MetricSelector"];
            unit?: string | null;
        };
        /** @enum {string} */
        ImmediateInterval: "5m" | "15m";
        InfoQuery: {
            items?: {
                [key: string]: components["schemas"]["QueryItemInfo"];
            };
            relations?: {
                [key: string]: components["schemas"]["QueryRelationInfo"];
            };
        };
        /** InfoQueryBody */
        InfoQueryBody: {
            params: components["schemas"]["InfoQueryParams"];
            query: components["schemas"]["InfoQuery"];
        };
        InfoQueryParams: {
            /** Format: date-time */
            from: string;
            /** Format: date-time */
            timestamp: string;
            /** Format: date-time */
            to: string;
        };
        /** @enum {string} */
        InstanceAction: "individual" | "worst" | "best";
        InstanceDashboard: {
            panels: components["schemas"]["Panel_for_InstanceWidget"][];
        };
        /** @enum {string} */
        Interval: "second" | "minute" | "hour" | "day" | "week" | "month" | "quarter" | "year";
        Item: {
            /** @default {} */
            assert: components["schemas"]["MetricSelector"];
            /** @default false */
            fork: boolean;
            /** @default [] */
            items: components["schemas"]["ItemRef"][];
            /** @default [] */
            keys: components["schemas"]["LabelName"][];
            /** @default {} */
            metrics: {
                [key: string]: components["schemas"]["Metric"];
            };
            /** @default {} */
            query: components["schemas"]["MetricSelector"];
        };
        ItemConnections: {
            prometheus: {
                [key: string]: components["schemas"]["ItemMetrics"];
            };
        };
        /** Format: uuid */
        ItemId: string;
        ItemIdSelector: {
            is: components["schemas"]["ItemId"];
        } | {
            in: components["schemas"]["ItemId"][];
        } | {
            template: components["schemas"]["TplVarId"];
        };
        /** ItemInfo */
        ItemInfo: {
            items: components["schemas"]["QualifiedItemName"][];
            keys: components["schemas"]["LabelName"][];
            metrics: components["schemas"]["MetricName"][];
            paths: string[];
            query: components["schemas"]["MetricSelector"];
        };
        ItemKeySelector: {
            property: components["schemas"]["Relative_PropertyId"];
        } | {
            parent: components["schemas"]["FollowParent"];
        } | {
            relation: components["schemas"]["FollowRelation"];
        };
        ItemList: {
            items: components["schemas"]["Series"][];
            keys: components["schemas"]["LabelName"][];
        };
        ItemMetrics: {
            group_by?: components["schemas"]["LabelName"][] | null;
            keys: {
                [key: string]: components["schemas"]["ItemKeySelector"];
            };
        };
        ItemName: string;
        ItemRef: {
            item: components["schemas"]["ItemName"];
            module?: components["schemas"]["ModuleName"] | null;
        };
        ItemSelector: components["schemas"]["Selector_for_MatchItem"];
        ItemStyleRule: {
            selector: components["schemas"]["ItemSelector"];
            style: components["schemas"]["ItemStyleSetting"];
        };
        ItemStyleSetting: {
            icon?: components["schemas"]["ByTheme_for_String"] | null;
            label?: components["schemas"]["Absolute_PropertyId"][] | null;
            label_color?: components["schemas"]["ByTheme_for_GraphColor"] | null;
            metric_badge?: components["schemas"]["MetricStyle_for_GraphMetricColor"] | null;
            metric_size?: components["schemas"]["MetricStyle_for_GraphNodeSize"] | null;
        };
        ItemType: {
            /** @default [] */
            implements: components["schemas"]["Relative_ItemTypeId"][];
            /** @default [] */
            keys: components["schemas"]["Relative_PropertyId"][];
            name: components["schemas"]["ItemTypeName"];
            name_template?: components["schemas"]["RelativeNameTemplate"] | null;
            /** @default [] */
            parents: components["schemas"]["Relative_ItemTypeId"][];
            /** @default [] */
            properties: components["schemas"]["Relative_PropertyId"][];
        };
        /** ItemTypeAlertBody */
        ItemTypeAlertBody: components["schemas"]["Absolute_ItemTypeId"][];
        ItemTypeDefinition: {
            dashboards: components["schemas"]["Dashboard"];
            metrics: {
                [key: string]: components["schemas"]["DashboardMetric"];
            };
            table: components["schemas"]["Table"];
            topologies?: {
                [key: string]: components["schemas"]["Topology"];
            } | null;
        };
        ItemTypeId: string;
        /** ItemTypeIds */
        ItemTypeIds: components["schemas"]["ItemTypeId"][];
        /** ItemTypeInfo */
        ItemTypeInfo: {
            children: components["schemas"]["Relative_ItemTypeId"][];
            implementors: components["schemas"]["Relative_ItemTypeId"][];
            implements: components["schemas"]["Relative_ItemTypeId"][];
            keys: components["schemas"]["Relative_PropertyId"][];
            name: components["schemas"]["ItemTypeName"];
            name_template?: components["schemas"]["RelativeNameTemplate"] | null;
            parents: components["schemas"]["Relative_ItemTypeId"][];
            prometheus_metrics: {
                [key: string]: {
                    [key: string]: components["schemas"]["ItemMetrics"];
                };
            };
            properties: {
                [key: string]: components["schemas"]["PropertyType"];
            };
            source_of: components["schemas"]["Relative_RelationTypeId"][];
            target_of: components["schemas"]["Relative_RelationTypeId"][];
        };
        ItemTypeName: {
            plural: string;
            singular: string;
        };
        ItemTypeSelector: {
            is: components["schemas"]["Relative_ItemTypeId"];
        } | {
            in: components["schemas"]["Relative_ItemTypeId"][];
        } | {
            template: components["schemas"]["TplVarId"];
        };
        /** Items */
        Items: {
            cols: [
                string,
                components["schemas"]["LabelName"][]
            ][];
            path: {
                [key: string]: components["schemas"]["ItemList"];
            };
            rows: components["schemas"]["Series"][];
        };
        /** ItemsParams */
        ItemsParams: {
            /** @default {} */
            filters: {
                [key: string]: {
                    [key: string]: string;
                };
            };
        };
        /** Items_for_Augmented_for_Item_and_StatusInfo */
        Items_for_Augmented_for_Item_and_StatusInfo: {
            items?: {
                [key: string]: components["schemas"]["Augmented_for_Item_and_StatusInfo"];
            };
            relations?: {
                [key: string]: components["schemas"]["Augmented_for_Relation_and_StatusInfo"];
            };
        };
        Items_for_Item: {
            items?: {
                [key: string]: components["schemas"]["Item"];
            };
            relations?: {
                [key: string]: components["schemas"]["Relation"];
            };
        };
        /** @description Prometheus label name. Must match regex /[a-zA-Z_][a-zA-Z0-9_]*\/. */
        LabelName: string;
        LabelSelector: "opt" | "set" | "unset" | {
            eq: string;
        } | {
            ne: string;
        } | {
            in: string[];
        } | {
            not_in: string[];
        };
        /** LoadMetricsInfo */
        LoadMetricsInfo: {
            cached: boolean;
            info: components["schemas"]["LoadedMetricsInfo"];
        };
        /** LoadMetricsParams */
        LoadMetricsParams: {
            /** @default false */
            force: boolean;
            query: components["schemas"]["MetricSelector"];
        };
        LoadedMetricsInfo: {
            common_by_presence: components["schemas"]["LabelName"][];
            common_by_value: {
                [key: string]: string;
            };
            /** Format: uint */
            nseries: number;
            query: components["schemas"]["MetricSelector"];
            /** Format: date-time */
            time: string;
        };
        Map_of_Set_of_MetricSelector: {
            [key: string]: components["schemas"]["MetricSelector"][];
        };
        Metric: {
            scalar: components["schemas"]["Scalar"];
        } | {
            histogram: components["schemas"]["Histogram"];
        } | {
            summary: components["schemas"]["Summary"];
        };
        MetricBound: "auto" | {
            /** Format: double */
            fixed: number;
        };
        MetricData: {
            labels: {
                [key: string]: string;
            };
            /** Format: double */
            value: number;
        };
        /** @description A valid prometheus metric name. Must match regex /[a-zA-Z_:][a-zA-Z0-9_:]*\/. */
        MetricName: string;
        MetricRange: {
            max: components["schemas"]["MetricBound"];
            min: components["schemas"]["MetricBound"];
            scale: components["schemas"]["MetricRangeScale"];
        };
        MetricRangeScale: "linear" | {
            logarithmic: {
                /** Format: double */
                base: number;
            };
        };
        MetricSelector: {
            [key: string]: components["schemas"]["LabelSelector"];
        };
        MetricStyle_for_GraphEdgeSize: {
            /** @default false */
            default_enabled: boolean;
            expr_name: components["schemas"]["ExprName"];
            /** @default {
             *       "max": "auto",
             *       "min": "auto",
             *       "scale": "linear"
             *     } */
            metric_range: components["schemas"]["MetricRange"];
            name: string;
            style_range?: components["schemas"]["StyleRange_for_GraphEdgeSize"];
            title?: string | null;
        };
        MetricStyle_for_GraphMetricColor: {
            /** @default false */
            default_enabled: boolean;
            expr_name: components["schemas"]["ExprName"];
            /** @default {
             *       "max": "auto",
             *       "min": "auto",
             *       "scale": "linear"
             *     } */
            metric_range: components["schemas"]["MetricRange"];
            name: string;
            style_range?: components["schemas"]["StyleRange_for_GraphMetricColor"];
            title?: string | null;
        };
        MetricStyle_for_GraphNodeSize: {
            /** @default false */
            default_enabled: boolean;
            expr_name: components["schemas"]["ExprName"];
            /** @default {
             *       "max": "auto",
             *       "min": "auto",
             *       "scale": "linear"
             *     } */
            metric_range: components["schemas"]["MetricRange"];
            name: string;
            style_range?: components["schemas"]["StyleRange_for_GraphNodeSize"];
            title?: string | null;
        };
        /** @description A metric value or series as returned by prometheus. */
        Metric_for_Map_of_String_and_DataPoint2_for_Value: {
            /** @description The label map identifying the metric. */
            metric: {
                [key: string]: string;
            };
            /** Format: date-time */
            timestamp: string;
            value: components["schemas"]["Value"];
        };
        /** MetricsData */
        MetricsData: {
            cols: components["schemas"]["LabelName"][];
            errors: string[];
            rows: components["schemas"]["MetricData"][];
        };
        /** MetricsParams */
        MetricsParams: {
            item: {
                [key: string]: string;
            };
        };
        /** ModInfo */
        ModInfo: {
            items: components["schemas"]["ItemName"][];
            requires: {
                [key: string]: components["schemas"]["ModuleVersionReq"];
            };
        };
        /** Module */
        Module: {
            /** @default {} */
            items: {
                [key: string]: components["schemas"]["Item"];
            };
            /** @default {} */
            requires: {
                [key: string]: components["schemas"]["ModuleVersionReq"];
            };
            version: components["schemas"]["ModuleVersion"];
        };
        /** ModuleInfo */
        ModuleInfo: {
            hints: components["schemas"]["Hints"];
            metrics?: components["schemas"]["LoadedMetricsInfo"] | null;
            schema?: components["schemas"]["SchemaInfo"] | null;
        };
        /** ModuleList */
        ModuleList: components["schemas"]["ModuleName"][];
        ModuleName: string;
        ModuleVersion: string;
        ModuleVersionReq: string;
        /** Modules */
        Modules: {
            [key: string]: components["schemas"]["ModuleVersion"];
        };
        /** @enum {string} */
        Multiplicity: "one-to-one" | "one-to-many";
        Node: {
            children: components["schemas"]["Tree"];
            id: string;
            label: string;
        };
        /** Package */
        Package: {
            /** @default {} */
            items: {
                [key: string]: components["schemas"]["ItemType"];
            };
            /** @default {} */
            properties: {
                [key: string]: components["schemas"]["PropertyType"];
            };
            /** @default {} */
            relations: {
                [key: string]: components["schemas"]["RelationType"];
            };
            /** @default {} */
            requires: {
                [key: string]: components["schemas"]["PackageVersionReq"];
            };
            version: components["schemas"]["PackageVersion"];
        };
        /** PackageData */
        PackageData: {
            connections?: components["schemas"]["ConnectionsPackages"] | null;
            packages: components["schemas"]["Packages"];
            prom_schema?: components["schemas"]["PromSchemaData"] | null;
        };
        PackageId: string;
        /** PackageInfo */
        PackageInfo: {
            [key: string]: components["schemas"]["PackageVersion"];
        };
        PackageVersion: string;
        PackageVersionReq: string;
        Packages: {
            [key: string]: components["schemas"]["Package"];
        };
        Panel_for_InstanceWidget: {
            documentation?: string | null;
            name: string;
            widgets: components["schemas"]["Widget_for_InstanceWidget"][];
        };
        Panel_for_TypeRangeWidget: {
            documentation?: string | null;
            name: string;
            widgets: components["schemas"]["Widget_for_TypeRangeWidget"][];
        };
        /** @enum {string} */
        ParamKind: "param" | "threshold";
        ParamSpec: {
            kind: components["schemas"]["ParamKind"];
            type: components["schemas"]["ParamTypeSpec"];
        };
        ParamTypeSpec: {
            int: Record<string, never>;
        } | {
            quantity: {
                /** Format: uint8 */
                decimals?: number | null;
                dimension: components["schemas"]["Dimension"];
                units?: components["schemas"]["Unit"][] | null;
            };
        } | {
            prom_duration: Record<string, never>;
        };
        ParamValue: number | components["schemas"]["Quantity"] | components["schemas"]["PromDuration"];
        ParamValues: {
            [key: string]: components["schemas"]["ParamValue"];
        };
        /** @enum {string} */
        PredefinedColor: "white" | "black" | "green" | "red" | "gray" | "yellow" | "orange" | "blue";
        PromDuration: string;
        /** PromItemList */
        PromItemList: {
            [key: string]: components["schemas"]["ItemName"][];
        };
        PromSchemaData: {
            modules: {
                [key: string]: components["schemas"]["Module"];
            };
            root: components["schemas"]["Root"];
        };
        PropertyId: string;
        PropertySelector: {
            [key: string]: components["schemas"]["ValueSelector"];
        };
        /** PropertyType */
        PropertyType: {
            /** @default null */
            description: string | null;
            name: string;
            value: unknown;
        };
        PropertyValue: {
            string: string;
        } | {
            /** Format: int64 */
            integer: number;
        } | {
            /** Format: double */
            float: number;
        } | {
            /** Format: date-time */
            time: string;
        } | {
            map: {
                [key: string]: components["schemas"]["PropertyValue"];
            };
        } | {
            list: components["schemas"]["PropertyValue"][];
        };
        /** PutAlertRuleForm */
        PutAlertRuleForm: {
            rule_form: components["schemas"]["UnverifiedAlertRuleForms"];
            /** Format: date-time */
            version?: string | null;
        };
        QualifiedItemName: string;
        Quantity: {
            unit: components["schemas"]["Unit"];
            /** Format: double */
            value: number;
        };
        Query: {
            elements: {
                [key: string]: components["schemas"]["QueryElem"];
            };
            filters?: {
                [key: string]: unknown;
            };
            root: components["schemas"]["QueryElemId"];
            template?: {
                [key: string]: components["schemas"]["TplVarDef"];
            };
        };
        QueryElem: {
            follow?: components["schemas"]["Follow"][];
            items: components["schemas"]["ItemSelector"];
        };
        QueryElemId: string;
        QueryItemInfo: {
            metrics?: {
                [key: string]: components["schemas"]["QueryPromInfo_for_ItemKeySelector"];
            };
        };
        QueryMetric: {
            expr: components["schemas"]["ExprImpl"];
            item: components["schemas"]["QualifiedItemName"];
            select?: components["schemas"]["SelectItem"] | null;
            /** @default {} */
            thresholds: {
                [key: string]: components["schemas"]["ExprImpl"];
            };
        };
        /** QueryParams_for_InstantQueryParams */
        QueryParams_for_InstantQueryParams: {
            expr: components["schemas"]["ExprImpl"];
            item: components["schemas"]["QualifiedItemName"];
            item_keys?: components["schemas"]["LabelName"][] | null;
            item_query?: {
                [key: string]: string;
            } | null;
            select?: components["schemas"]["SelectItem"] | null;
            source?: components["schemas"]["SourceId"] | null;
            /** @default {} */
            thresholds: {
                [key: string]: components["schemas"]["ExprImpl"];
            };
            /** Format: date-time */
            time?: string | null;
        };
        /** QueryParams_for_RangeQueryParams */
        QueryParams_for_RangeQueryParams: {
            /** Format: date-time */
            end: string;
            expr: components["schemas"]["ExprImpl"];
            item: components["schemas"]["QualifiedItemName"];
            item_keys?: components["schemas"]["LabelName"][] | null;
            item_query?: {
                [key: string]: string;
            } | null;
            select?: components["schemas"]["SelectItem"] | null;
            source?: components["schemas"]["SourceId"] | null;
            /** Format: date-time */
            start: string;
            /** Format: double */
            step: number;
            /** @default {} */
            thresholds: {
                [key: string]: components["schemas"]["ExprImpl"];
            };
        };
        QueryPromInfo_for_ItemKeySelector: {
            expr: components["schemas"]["ExprImpl"];
            item: components["schemas"]["QualifiedItemName"];
            labels: {
                [key: string]: components["schemas"]["ItemKeySelector"];
            };
        };
        QueryPromInfo_for_RelationKeySelector: {
            expr: components["schemas"]["ExprImpl"];
            item: components["schemas"]["QualifiedItemName"];
            labels: {
                [key: string]: components["schemas"]["RelationKeySelector"];
            };
        };
        /** QueryRawParams_for_RangeQueryParams */
        QueryRawParams_for_RangeQueryParams: {
            /** Format: date-time */
            end: string;
            query: string;
            /** Format: date-time */
            start: string;
            /** Format: double */
            step: number;
        };
        QueryRelationInfo: {
            metrics?: {
                [key: string]: components["schemas"]["QueryPromInfo_for_RelationKeySelector"];
            };
        };
        /** @enum {string} */
        ReferenceInterval: "7d" | "30d";
        Relation: {
            /** @default {} */
            properties: {
                [key: string]: unknown;
            };
            relation_type: components["schemas"]["Relative_RelationTypeId"];
            source: components["schemas"]["ItemId"];
            target: components["schemas"]["ItemId"];
        };
        RelationConnections: {
            prometheus: {
                [key: string]: components["schemas"]["RelationMetrics"];
            };
        };
        /** Format: uuid */
        RelationId: string;
        RelationIdSelector: {
            is: components["schemas"]["RelationId"];
        } | {
            in: components["schemas"]["RelationId"][];
        } | {
            template: components["schemas"]["TplVarId"];
        };
        RelationKeySelector: {
            property: components["schemas"]["Relative_PropertyId"];
        } | {
            source: components["schemas"]["FollowItem"];
        } | {
            target: components["schemas"]["FollowItem"];
        } | {
            item: components["schemas"]["FollowItem"];
        };
        RelationMetrics: {
            keys: {
                [key: string]: components["schemas"]["RelationKeySelector"];
            };
        };
        RelationSelector: components["schemas"]["Selector_for_MatchRelation"];
        RelationStyleRule: {
            selector: components["schemas"]["RelationSelector"];
            style: components["schemas"]["RelationStyleSetting"];
        };
        RelationStyleSetting: {
            metric_color?: components["schemas"]["MetricStyle_for_GraphMetricColor"] | null;
            metric_label?: components["schemas"]["MetricStyle_for_GraphMetricColor"] | null;
            metric_size?: components["schemas"]["MetricStyle_for_GraphEdgeSize"] | null;
        };
        RelationType: {
            /** @default false */
            bidirectional: boolean;
            /** @default null */
            connector: components["schemas"]["Connector"] | null;
            /** @default null */
            description: string | null;
            multiplicity: components["schemas"]["Multiplicity"];
            name: string;
            /** @default [] */
            properties: components["schemas"]["Relative_PropertyId"][];
            source: components["schemas"]["Relative_ItemTypeId"];
            target: components["schemas"]["Relative_ItemTypeId"];
        };
        RelationTypeId: string;
        /** RelationTypeIds */
        RelationTypeIds: components["schemas"]["RelationTypeId"][];
        /** RelationTypeInfo */
        RelationTypeInfo: {
            bidirectional: boolean;
            connector?: components["schemas"]["Connector"] | null;
            description?: string | null;
            multiplicity: components["schemas"]["Multiplicity"];
            name: string;
            prometheus_metrics: {
                [key: string]: {
                    [key: string]: components["schemas"]["RelationMetrics"];
                };
            };
            properties: {
                [key: string]: components["schemas"]["PropertyType"];
            };
            source: components["schemas"]["Relative_ItemTypeId"];
            target: components["schemas"]["Relative_ItemTypeId"];
        };
        RelationTypeSelector: {
            is: components["schemas"]["Relative_RelationTypeId"];
        } | {
            in: components["schemas"]["Relative_RelationTypeId"][];
        } | {
            template: components["schemas"]["TplVarId"];
        };
        RelativeNameTemplate: string;
        Relative_ItemTypeId: string;
        Relative_PropertyId: string;
        Relative_RelationTypeId: string;
        /** RenameItemParams */
        RenameItemParams: {
            to: components["schemas"]["ItemName"];
        };
        /** RenameModuleParams */
        RenameModuleParams: {
            to: components["schemas"]["ModuleName"];
        };
        /**
         * Renamed
         * @enum {string}
         */
        Renamed: "renamed";
        Root: {
            /** @default {} */
            items: {
                [key: string]: components["schemas"]["Item"];
            };
            /** @default {} */
            requires: {
                [key: string]: components["schemas"]["ModuleVersionReq"];
            };
            /** @default root */
            root: components["schemas"]["ItemRef"];
        };
        Scalar: {
            /** @default {} */
            labels: components["schemas"]["MetricSelector"];
            /** @default {} */
            query: components["schemas"]["MetricSelector"];
            /** @default null */
            type: components["schemas"]["ScalarType"] | null;
            /** @default null */
            unit: string | null;
        };
        /** @enum {string} */
        ScalarType: "counter" | "gauge";
        SchemaInfo: {
            /** Format: uint */
            nitems: number;
            root: components["schemas"]["ItemName"];
        };
        SelectItem: {
            top: {
                /** Format: uint64 */
                n: number;
            };
        } | {
            bottom: {
                /** Format: uint64 */
                n: number;
            };
        };
        /** SelectorCtx */
        SelectorCtx: {
            item: components["schemas"]["Absolute_ItemTypeId"][] | null;
        } | {
            relation: components["schemas"]["Absolute_RelationTypeId"][] | null;
        };
        /** SelectorCtxInfo */
        SelectorCtxInfo: {
            items: components["schemas"]["Absolute_ItemTypeId"][];
            parents: components["schemas"]["Absolute_ItemTypeId"][];
            properties: components["schemas"]["Absolute_PropertyId"][];
            relations: components["schemas"]["Absolute_RelationTypeId"][];
            sources: components["schemas"]["Absolute_ItemTypeId"][];
            targets: components["schemas"]["Absolute_ItemTypeId"][];
        };
        Selector_for_MatchItem: {
            item_id?: components["schemas"]["ItemIdSelector"] | null;
            item_type?: components["schemas"]["ItemTypeSelector"] | null;
            parent?: components["schemas"]["ItemSelector"] | null;
            properties?: components["schemas"]["PropertySelector"] | null;
            relations?: components["schemas"]["RelationSelector"] | null;
        };
        Selector_for_MatchRelation: {
            endpoint?: components["schemas"]["Endpoint"] | null;
            item?: components["schemas"]["ItemSelector"] | null;
            properties?: components["schemas"]["PropertySelector"] | null;
            relation_id?: components["schemas"]["RelationIdSelector"] | null;
            relation_type?: components["schemas"]["RelationTypeSelector"] | null;
        };
        Series: {
            /** Format: uint64 */
            count: number;
            keys: {
                [key: string]: string;
            };
        };
        /** @enum {string} */
        Severity: "minor" | "warning" | "major" | "critical";
        SingleVersionInfo: {
            active: components["schemas"]["Anchor"];
        };
        SourceId: string;
        SplitBy: {
            label: components["schemas"]["LabelName"];
            /** @default {} */
            query: components["schemas"]["MetricSelector"];
        };
        /** SplitByParams */
        SplitByParams: {
            label: components["schemas"]["LabelName"];
        };
        /** SplitByQueryParams */
        SplitByQueryParams: {
            label: components["schemas"]["LabelName"];
            query: components["schemas"]["MetricSelector"];
        };
        Status: "Ok" | {
            Nok: components["schemas"]["Severity"];
        };
        StatusChange: {
            previous?: components["schemas"]["Status"] | null;
            status: components["schemas"]["Status"];
        };
        StatusInfo: {
            aggregated_status?: components["schemas"]["Status"] | null;
            /** Format: uint */
            alerts: number;
            individual_status?: components["schemas"]["Versioned_for_SingleVersionInfo_and_StatusChange"] | null;
        };
        StringSelector: {
            equals: string;
        } | {
            in: string[];
        } | {
            template: components["schemas"]["TplVarId"];
        } | {
            not: components["schemas"]["StringSelector"];
        } | {
            all: components["schemas"]["StringSelector"][];
        } | {
            any: components["schemas"]["StringSelector"][];
        };
        StyleRange_for_GraphEdgeSize: {
            default?: components["schemas"]["GraphEdgeSize"];
            interpolate: boolean;
            range: components["schemas"]["GraphEdgeSize"][];
        };
        StyleRange_for_GraphMetricColor: {
            default?: components["schemas"]["GraphMetricColor"];
            interpolate: boolean;
            range: components["schemas"]["GraphMetricColor"][];
        };
        StyleRange_for_GraphNodeSize: {
            default?: components["schemas"]["GraphNodeSize"];
            interpolate: boolean;
            range: components["schemas"]["GraphNodeSize"][];
        };
        Stylesheet: {
            items?: components["schemas"]["ItemStyleRule"][];
            relations?: components["schemas"]["RelationStyleRule"][];
        };
        Summary: {
            /** @default {} */
            labels: components["schemas"]["MetricSelector"];
            /** @default {} */
            query: components["schemas"]["MetricSelector"];
            unit?: string | null;
        };
        Table: {
            column_order?: components["schemas"]["TableColumn"][] | null;
            column_visibility?: components["schemas"]["TableColumn"][] | null;
        };
        TableColumn: {
            property: components["schemas"]["Relative_PropertyId"];
        } | {
            metric: components["schemas"]["DashboardMetricId"];
        };
        Topology: {
            infoQuery?: components["schemas"]["InfoQuery"] | null;
            query: components["schemas"]["Query"];
            queryFilters: components["schemas"]["TopologyQueryFilter"][];
            stylesheet: components["schemas"]["Stylesheet"];
        };
        TopologyFilterType: {
            multipleSelection: boolean;
            /** @enum {string} */
            type: "autocomplete";
        };
        TopologyId: string;
        TopologyQueryFilter: {
            filter: components["schemas"]["TopologyFilterType"];
            label: string;
            name: string;
        };
        /** @enum {string} */
        TplVarDef: "strings" | "item_types" | "relation_types" | "item_ids" | "relation_ids";
        TplVarId: string;
        TraceItem: "operation" | {
            service: components["schemas"]["CombineScores"];
        };
        /** @enum {string} */
        TraceMetric: "Duration" | "Busy" | "CallRate" | "ErrorRate";
        /** @enum {string} */
        TraceParameter: "mean" | "lower_bound" | "higher_bound";
        Tree: components["schemas"]["Node"][];
        /** TreeInfo */
        TreeInfo: {
            collected: components["schemas"]["CollectedInfo"][];
            errors: string[];
            items: components["schemas"]["QualifiedItemName"][];
            keys: components["schemas"]["LabelName"][];
            metrics: components["schemas"]["MetricName"][];
            name: components["schemas"]["QualifiedItemName"];
            paths: string[];
            query: components["schemas"]["MetricSelector"];
            /** @enum {string} */
            type: "item";
        } | {
            collected: components["schemas"]["CollectedInfo"][];
            metric: components["schemas"]["Metric"];
            name: components["schemas"]["MetricName"];
            paths: string[];
            /** @enum {string} */
            type: "metric";
        };
        TypeRangeDashboard: {
            panels: components["schemas"]["Panel_for_TypeRangeWidget"][];
        };
        TypeSet: {
            items: components["schemas"]["Relative_ItemTypeId"][];
            relations: components["schemas"]["Relative_RelationTypeId"][];
        };
        Unit: string;
        UnverifiedAlertRuleForms: components["schemas"]["AlertRuleForms"];
        /**
         * Format: double
         * @description A floating-point value as returned by prometheus. Prometheus uses a string representation for floating-point numbers because JSON does not allow any of the "special" floating-point values for its number type. Special values are "NaN", "+Inf" and "-Inf".
         */
        Value: number;
        ValueSelector: {
            string: components["schemas"]["StringSelector"];
        };
        Versioned_for_SingleVersionInfo_and_StatusChange: {
            value: components["schemas"]["StatusChange"];
            version: components["schemas"]["SingleVersionInfo"];
        };
        /** View */
        View: {
            defaultItemType?: components["schemas"]["Absolute_ItemTypeId"] | null;
            defaultTopology?: components["schemas"]["TopologyId"] | null;
            defaultTopologyFilters: {
                [key: string]: unknown;
            };
            elements: components["schemas"]["ViewElements"];
            itemTypes: {
                [key: string]: components["schemas"]["ItemTypeDefinition"];
            };
            name: string;
            svgSource?: string | null;
            svgSourceDark?: string | null;
            topologies: {
                [key: string]: components["schemas"]["Topology"];
            };
        };
        ViewElements: {
            external: components["schemas"]["Elements"];
            internal: components["schemas"]["Elements"];
        };
        /** Views */
        Views: {
            [key: string]: components["schemas"]["View"];
        };
        Widget_for_InstanceWidget: {
            documentation?: string | null;
            name: string;
        } & (({
            /** @enum {string} */
            graph: "range";
        } & ({
            metric: components["schemas"]["DashboardMetricId"];
            /** @default true */
            min_max: boolean;
            /** @enum {string} */
            widget_type: "lines";
        } | {
            graph_type: components["schemas"]["AnomalyTracesGraphType"];
            labels?: {
                [key: string]: string;
            } | null;
            /** @enum {string} */
            widget_type: "anomaly_traces";
        })) | ({
            /** @enum {string} */
            graph: "instant";
        } & ({
            metric: components["schemas"]["DashboardMetricId"];
            /** @enum {string} */
            widget_type: "number";
        } | {
            /** Format: double */
            max: number;
            metric: components["schemas"]["DashboardMetricId"];
            /**
             * Format: double
             * @default 0
             */
            min: number;
            /** @enum {string} */
            widget_type: "meter";
        } | {
            /** Format: double */
            max: number;
            metrics: components["schemas"]["DashboardMetricId"][];
            /**
             * Format: double
             * @default 0
             */
            min: number;
            /** @enum {string} */
            widget_type: "bar";
        })));
        Widget_for_TypeRangeWidget: {
            documentation?: string | null;
            name: string;
        } & ({
            metric: components["schemas"]["DashboardMetricId"];
            select: components["schemas"]["SelectItem"];
            /** @enum {string} */
            widget_type: "lines";
        } | {
            graph_type: components["schemas"]["AnomalyTracesGraphType"];
            labels?: {
                [key: string]: string;
            } | null;
            /** @enum {string} */
            widget_type: "anomaly_traces";
        });
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "get_api-alert_rules-4bc08eb814eef5afac2bd210d6ad1246": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-alert_rules-942c5644da3491fa8a3e74f7e836671b": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rule: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "put_api-alert_rules-942c5644da3491fa8a3e74f7e836671b": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rule: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PutAlertRuleForm"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "delete_api-alert_rules-942c5644da3491fa8a3e74f7e836671b": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rule: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-alert_rules-4dddf55e8cd9ee39ce2ff0d331ec17d9": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rule: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-alert_rules-6ee518ec12be7d2f900aecd51f1a6ed4": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rule: [
                    components["schemas"]["AlertRuleTemplateName"],
                    components["schemas"]["LabelName"]
                ];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post_api-alerts-all-c2133f67756920fe2b938d6a6579a8bd": {
        parameters: {
            query?: {
                include_unmatched?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post_api-alerts-all-4a138f3f83d101b3f271bd65c62c2dfe": {
        parameters: {
            query?: {
                include_unmatched?: boolean;
            };
            header?: never;
            path: {
                time: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post_api-alerts-bins-d0f53a27d0816866180d65dda416cde9": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BinsParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-alerts-count-item-c3dd54eb98ecbd54fb17358e3545258f": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-alerts-count-item-be11e69fba81d0668d68f78d9def784e": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_id: [
                    components["schemas"]["ItemId"],
                    string
                ];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post_api-alerts-events-3b780ae129bf28fd3f7ccae59687a49c": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BinsParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-alerts-item-badc0e72af2b2c5b769a4d02cccf08ab": {
        parameters: {
            query?: {
                include_children?: boolean;
            };
            header?: never;
            path: {
                item: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-alerts-item-7770439a3df67d85cda363994f8c3429": {
        parameters: {
            query?: {
                include_children?: boolean;
            };
            header?: never;
            path: {
                item: [
                    components["schemas"]["ItemId"],
                    string
                ];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post_api-alerts-item_types-fa663c89840350640a434c531b740f6a": {
        parameters: {
            query?: {
                include_children?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemTypeAlertBody"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post_api-alerts-item_types-71a35f143625c957a83f86e2dca1b9cd": {
        parameters: {
            query?: {
                include_children?: boolean;
            };
            header?: never;
            path: {
                time: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemTypeAlertBody"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-alerts-items-b1a836b6502cc51d25d13f2d3df98979": {
        parameters: {
            query?: {
                include_children?: boolean;
            };
            header?: never;
            path: {
                package: [
                    components["schemas"]["PackageId"],
                    components["schemas"]["ItemTypeId"]
                ];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-alerts-items-1026ee15012fb5e1733387022b27879a": {
        parameters: {
            query?: {
                include_children?: boolean;
            };
            header?: never;
            path: {
                package: [
                    components["schemas"]["PackageId"],
                    components["schemas"]["ItemTypeId"],
                    string
                ];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-alerts-relation-5a61a000c274d29a58c1bb5f121fa51d": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rel: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-alerts-relation-e7fcd91b84274080e00b9abe7292ac9d": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rel: [
                    components["schemas"]["RelationId"],
                    string
                ];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post_api-changes-bins-d099ac847174d3a7df7e0f84b5337a05": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BinsParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post_api-changes-events-b3d9f9052d1f6ba3377dcfbf05f5520f": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BinsParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BinnedEvents_for_DbItem"];
                };
            };
        };
    };
    "get_api-connections-package-5c9ad65fe7a024f4c4cf7fc273719d94": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectionsPackageInfo"];
                };
            };
        };
    };
    "get_api-connections-package-29093cce02f6ed2791d96dbab7471590": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                package: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectionsPackage"];
                };
            };
        };
    };
    "put_api-connections-package-29093cce02f6ed2791d96dbab7471590": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                package: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConnectionsPackage"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Done"];
                };
            };
        };
    };
    "delete_api-connections-package-29093cce02f6ed2791d96dbab7471590": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                package: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Done"];
                };
            };
        };
    };
    "get_api-dashboards-778aa5477f8258d931c852edbc9eb703": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-dashboards-ea6b5953211ed4cae2503597e120a851": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dashboard: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post_api-elements-3fe009976726027c66de1b551661b895": {
        parameters: {
            query: {
                include_aggregated_status: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Elements"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Items_for_Augmented_for_Item_and_StatusInfo"];
                };
            };
        };
    };
    "post_api-elements-aa86da821f7ed158a9993fcd48df45a6": {
        parameters: {
            query: {
                include_aggregated_status: boolean;
            };
            header?: never;
            path: {
                time: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Elements"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Items_for_Augmented_for_Item_and_StatusInfo"];
                };
            };
        };
    };
    "post_api-info-query-metrics-b5c635ab9cfec6c0ccf0f6274d0f311a": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InfoQueryBody"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-item-2490f8ffde47d4c357b7356ded0f88fe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "put_api-item-2490f8ffde47d4c357b7356ded0f88fe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Item"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-item-view-60cca7f4cc59e7c98bd201c08cf47f1b": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                package: [
                    components["schemas"]["PackageId"],
                    components["schemas"]["ItemTypeId"]
                ];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-item-446b04a6c9093bc63aa458a66fe2b2f1": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "put_api-item-446b04a6c9093bc63aa458a66fe2b2f1": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Item"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "delete_api-item-446b04a6c9093bc63aa458a66fe2b2f1": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "put_api-items-c11bcff936a2d7ff8ff232de884821ab": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Items"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-items-count-aggr-status-item-type-9f88096f88348424884e226a79dfa38a": {
        parameters: {
            query?: {
                numberOfItems?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-items-count-aggr-status-item-type-f7474b3ebf2660844c5f9353e23a11e9": {
        parameters: {
            query?: {
                numberOfItems?: number;
            };
            header?: never;
            path: {
                item_type: [
                    components["schemas"]["Absolute_ItemTypeId"],
                    string
                ];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-items-count-descendants-210433b11a0993e27c19100572fe879d": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-items-count-descendants-0676af2a587b82b7b634016cd675aa0a": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_id: [
                    components["schemas"]["ItemId"],
                    string
                ];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "put_api-items-af5b6ada4efb34616851134491003158": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pkg: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Items"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post_api-metrics-bulk-instant-c27fe2608f4ad679de74b1a83ace1623": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BulkQueryParams_for_InstantQueryParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post_api-metrics-bulk-range-45ae9c4281087553636ca6a4e080661a": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BulkQueryParams_for_RangeQueryParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post_api-metrics-instant-d8708235afce957e9b9d02c02441f615": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QueryParams_for_InstantQueryParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post_api-metrics-range-5f48bc2f79cac5fc6cd0dda0799eb0f6": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QueryParams_for_RangeQueryParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post_api-metrics-range_raw-a627218e7fa7052a2392c4ba37f54f2f": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QueryRawParams_for_RangeQueryParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-metrics-sources-1d271603f653bc04ef537472b999cdbf": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                promitem: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-package-62d782e497d9ee940fb3268f82b23457": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackageInfo"];
                };
            };
        };
    };
    "get_api-package-b87fad87381fc03c073bbfba052f7a5c": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                package: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Package"];
                };
            };
        };
    };
    "put_api-package-b87fad87381fc03c073bbfba052f7a5c": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                package: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Package"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Done"];
                };
            };
        };
    };
    "delete_api-package-b87fad87381fc03c073bbfba052f7a5c": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                package: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Done"];
                };
            };
        };
    };
    "get_api-packages-95be49f06ca411e6ea5790d99e2c62e1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PackageData"];
                };
            };
        };
    };
    "get_api-prom-schema-generate-0233f5cc7152ab97c4b3c32c40e75395": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModuleName"][];
                };
            };
        };
    };
    "get_api-prom-schema-generate-43d173b0f77323c2b47fabb024dc0306": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                module: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModuleInfo"];
                };
            };
        };
    };
    "put_api-prom-schema-generate-43d173b0f77323c2b47fabb024dc0306": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                module: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Created"];
                };
            };
        };
    };
    "delete_api-prom-schema-generate-43d173b0f77323c2b47fabb024dc0306": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                module: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Deleted"];
                };
            };
        };
    };
    "put_api-prom-schema-generate-4cd7fd1f139f569363ef7796995c5b17": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                module: components["schemas"]["ModuleName"];
                path: string[];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChooseParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Done"];
                };
            };
        };
    };
    "delete_api-prom-schema-generate-4cd7fd1f139f569363ef7796995c5b17": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                module: components["schemas"]["ModuleName"];
                path: string[];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Done"];
                };
            };
        };
    };
    "get_api-prom-schema-generate-3fcace7f8cd59a2a851c787d9bb03be2": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                module: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Module"];
                };
            };
        };
    };
    "get_api-prom-schema-generate-bf91254b80a6371c1941aae4a206f6a5": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                module: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenInfo"];
                };
            };
        };
    };
    "get_api-prom-schema-generate-88c48e0209d387e2f169c4a5d4620c25": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                module: components["schemas"]["ModuleName"];
                path: string[];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenerateTreeInfo"];
                };
            };
        };
    };
    "post_api-prom-schema-generate-8ae0d9076f354c792b9acd414f482af7": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                module: components["schemas"]["ModuleName"];
                path: string[];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemsParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Items"];
                };
            };
        };
    };
    "get_api-prom-schema-generate-ea3b52ef4f1743e9fb7666b468d3814f": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                module: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoadedMetricsInfo"];
                };
            };
        };
    };
    "post_api-prom-schema-generate-ea3b52ef4f1743e9fb7666b468d3814f": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                module: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoadMetricsParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoadMetricsInfo"];
                };
            };
        };
    };
    "get_api-prom-schema-generate-4aadc79f9602153c3d1ca79b0aefd83c": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                module: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Metric_for_Map_of_String_and_DataPoint2_for_Value"][];
                };
            };
        };
    };
    "post_api-prom-schema-generate-184830d779a6bb36f7b5b9ad256dd478": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                module: components["schemas"]["ModuleName"];
                path: string[];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MetricsParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetricsData"];
                };
            };
        };
    };
    "post_api-prom-schema-generate-a34fbed3fe3cb5fdbdb8960e3c802282": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                module: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RenameModuleParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Renamed"];
                };
            };
        };
    };
    "put_api-prom-schema-generate-b74aceafd2b27635e8971cec72ffc116": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                module: components["schemas"]["ItemName"];
                item: components["schemas"]["ModuleName"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RenameItemParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Renamed"];
                };
            };
        };
    };
    "delete_api-prom-schema-generate-b74aceafd2b27635e8971cec72ffc116": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                module: components["schemas"]["ItemName"];
                item: components["schemas"]["ModuleName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Done"];
                };
            };
        };
    };
    "put_api-prom-schema-generate-ff0a7fe2c2abc8ac39ee217f57386f76": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                module: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SplitByQueryParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Done"];
                };
            };
        };
    };
    "delete_api-prom-schema-generate-ff0a7fe2c2abc8ac39ee217f57386f76": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                module: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SplitByQueryParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Done"];
                };
            };
        };
    };
    "put_api-prom-schema-generate-2db4474c419296a7349881a1a9277b69": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                module: components["schemas"]["ModuleName"];
                path: string[];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SplitByParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Done"];
                };
            };
        };
    };
    "delete_api-prom-schema-generate-2db4474c419296a7349881a1a9277b69": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                module: components["schemas"]["ModuleName"];
                path: string[];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SplitByParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Done"];
                };
            };
        };
    };
    "get_api-prom-schema-generate-7118337fe43a1b0d14707654f31cea97": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                module: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Node"][];
                };
            };
        };
    };
    "get_api-prom-schema-info-item-7539ee3d22657ccb7d6fbe84973655c5": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemInfo"];
                };
            };
        };
    };
    "get_api-prom-schema-info-module-a65631f385dd4817bfb547f8cb01a0eb": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Modules"];
                };
            };
        };
    };
    "get_api-prom-schema-info-module-8d1e3f3f203e66080887984a4cbbec08": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mod: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModInfo"];
                };
            };
        };
    };
    "get_api-prom-schema-info-tree{path:-.*|$}-3cedf0f8cdbb5bc9887de32617d56762": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                path: string[];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TreeInfo"];
                };
            };
        };
    };
    "get_api-prom-schema-items-0558b36fcd5a74790c8dd1a28d8011d4": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PromItemList"];
                };
            };
        };
    };
    "post_api-prom-schema-items-tree{path:-.*|$}-1d091eda3a58a9a0c38fa2c3d6c896c4": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                path: string[];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemsParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Items"];
                };
            };
        };
    };
    "post_api-prom-schema-metrics-tree{path:-.*|$}-54bb8d2bc840c995523755d86f3a925a": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                path: string[];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MetricsParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetricsData"];
                };
            };
        };
    };
    "get_api-prom-schema-tree-ede916f7de4ad25ddc8fb2a7d885ebb8": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Node"][];
                };
            };
        };
    };
    "post_api-query-cf794541a341a52c22360c3691b7b4b5": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Query"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post_api-query-55e4a5c417dbc0d863271d8c82c641e3": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                time: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Query"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-relation-a6204db2d27ad54d2a69cd7e9d39c398": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "put_api-relation-a6204db2d27ad54d2a69cd7e9d39c398": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Relation"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "put_api-relation-c74778c7c61ae2c84457a9e29909fa7f": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Relation"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "delete_api-relation-c74778c7c61ae2c84457a9e29909fa7f": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post_api-search-domain-3813744daea64e5fcb87acceda9b906b": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Query"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post_api-search-domain-5d48caea8714f51f80553eae37e1a00c": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                time: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Query"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-status-3372e7c31d1eaae32cf561ed2a2ab917": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post_api-status-bins-df7ff92abb502c04c8d25d686e39a319": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BinsParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post_api-status-events-1c8824adf9e84ed0207a32d4a8b45a1a": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BinsParams"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BinnedEvents_for_StatusDoc"];
                };
            };
        };
    };
    "get_api-status-2ae3adcf8999a0550002c58214065d40": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                time: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "put_api-transaction-75f9f1c620cc1f06140883d2f4deed31": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "put_api-transaction-c19641cd42278281a8cf95e4e21f8b50": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tx: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "put_api-transaction-5dfdd53234848a2f88fd694822f74529": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tx: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "put_api-transaction-b1853eb93435c03a7bca2a15d5aed14c": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tx: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Item"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "put_api-transaction-3e9f5159570188bd52fdd47dd15580bb": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tx: string;
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Item"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post_api-transaction-3e9f5159570188bd52fdd47dd15580bb": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tx: string;
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "delete_api-transaction-3e9f5159570188bd52fdd47dd15580bb": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tx: string;
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "put_api-transaction-b3f6eecd785b375ce8a903251a482de8": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tx: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Items"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "put_api-transaction-84a53342638c2546107f48c2ccbd0a63": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tx: string;
                pkg: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Items"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "put_api-transaction-fb20037dfee0e9a6580c8c6cc03c493a": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tx: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Relation"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "put_api-transaction-d9496f48b00b87cb8758934fa59e409f": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tx: string;
                rel_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Relation"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post_api-transaction-d9496f48b00b87cb8758934fa59e409f": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tx: string;
                rel_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "delete_api-transaction-d9496f48b00b87cb8758934fa59e409f": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tx: string;
                rel_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-types-item-c2687ce20abda1bdebbad3f33bdaf745": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Absolute_ItemTypeId"][];
                };
            };
        };
    };
    "get_api-types-item-2dab86969b5f7f4684e5f062e0400222": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                package: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTypeId"][];
                };
            };
        };
    };
    "get_api-types-item-2578a64cb06d2ce54727fe031ee41f07": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                package: components["schemas"]["PackageId"];
                type: components["schemas"]["ItemTypeId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTypeInfo"];
                };
            };
        };
    };
    "get_api-types-property-ddf577326ba19d392e35bf3b66f458a1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-types-property-619e5532f65563b7b27d393f566dba7c": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                package: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-types-property-88c76de994e539b6f9a653142f7ba9da": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                package: components["schemas"]["PackageId"];
                type: components["schemas"]["PropertyId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PropertyType"];
                };
            };
        };
    };
    "get_api-types-relation-5b3e28ff8d56b4aa49f571d2cf54f546": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Absolute_RelationTypeId"][];
                };
            };
        };
    };
    "get_api-types-relation-bb9e24f873ff8a3857e9a50eeaf9c17a": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                package: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelationTypeId"][];
                };
            };
        };
    };
    "get_api-types-relation-cd8cad06576d7e0459b0f2bf765e8c3e": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                package: components["schemas"]["PackageId"];
                type: components["schemas"]["RelationTypeId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelationTypeInfo"];
                };
            };
        };
    };
    "post_api-types-selector-951ae1f4ca09e0ea0b9ddab76ff4f80b": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SelectorCtx"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SelectorCtxInfo"];
                };
            };
        };
    };
    "get_api-version-5f4cac1cdb82904c0873630dd93553bd": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-views-da932167131cc37e6c0b62f383fade1e": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "put_api-views-da932167131cc37e6c0b62f383fade1e": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Views"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get_api-views-cce9236053a0f7544e8a21147ecf8883": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                view: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "put_api-views-cce9236053a0f7544e8a21147ecf8883": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                view: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["View"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
